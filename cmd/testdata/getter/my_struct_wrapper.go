// Code generated by type-wrapper; DO NOT EDIT.
package test

import (
	"encoding/json"
	"time"
)

type IStruct interface {
	Field1() string
	SetField2(val *int)
	Field3() time.Time
	SetTime(val time.Time)
	Json() []byte
}

// MyStructWrapper encapulates the type MyStruct
type MyStructWrapper struct {
	MyStruct
	// The name of the original type, it gets initalized when calling Json() function, DO NOT USE IT
	DataType string `json:"_data_type,omitempty"`
}

func (m MyStructWrapper) Field1() string {
	return m.MyStruct.Field1
}

func (m MyStructWrapper) SetField2(val *int) {
	m.MyStruct.Field2 = val
}

func (m MyStructWrapper) Field3() time.Time {
	return m.MyStruct.Field3
}

func (m MyStructWrapper) SetTime(val time.Time) {
	m.MyStruct.Field3 = val
}

func (m MyStructWrapper) Json() []byte {
	m.DataType = "MyStruct"
	if data, err := json.Marshal(m); err == nil {
		return data
	}
	return []byte{}
}
