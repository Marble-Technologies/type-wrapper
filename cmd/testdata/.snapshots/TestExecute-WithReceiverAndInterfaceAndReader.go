// Code generated by type-wrapper; DO NOT EDIT.
package test

import (
	"encoding/json"
)

type ITester interface {
	Field1() string
	SetSecondField(val int32)
	Read(p []byte) (int, error)
}

// TesterWrapper encapulates the type Tester
type TesterWrapper struct {
	// The name of the original type, it gets initalized when calling Read() function, DO NOT USE IT
	DataType string `json:"_data_type,omitempty"`
	Tester
}

func (tester TesterWrapper) Field1() string {
	return tester.Tester.field1
}

func (tester TesterWrapper) SetSecondField(val int32) {
	tester.Tester.field2 = val
}

func (tester TesterWrapper) Read(p []byte) (int, error) {
	tester.DataType = "Tester"
	data, err := json.Marshal(tester)
	if err != nil {
		return 0, err
	}
	n := copy(p, data)
	return n, nil
}

