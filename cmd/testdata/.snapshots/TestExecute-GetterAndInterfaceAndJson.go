// Code generated by type-wrapper; DO NOT EDIT.
package test

import (
	"encoding/json"
)

type ITester interface {
	Field1() string
	SetField1(val string)
	GetSecondField() int32
	Json() []byte
}

// TesterWrapper encapulates the type Tester
type TesterWrapper struct {
	Tester
	// The name of the original type, it gets initalized when calling Json() function, DO NOT USE IT
	DataType string `json:"_data_type,omitempty"`
}

func (t TesterWrapper) Field1() string {
	return t.Tester.Field1
}

func (t TesterWrapper) SetField1(val string) {
	t.Tester.Field1 = val
}

func (t TesterWrapper) GetSecondField() int32 {
	return t.Tester.Field2
}

func (t TesterWrapper) Json() []byte {
	t.DataType = "Tester"
	if data, err := json.Marshal(t); err == nil {
		return data
	}
	return []byte{}
}

